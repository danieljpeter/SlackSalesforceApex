public with sharing class L33tTranslator {

    //system.debug(L33tTranslator.translate('Slack is Awesome!'));
    public static String translate(String input) {
/*
        Map<String, String> charMap = new Map<String, String>{
            'a' => '4',
            'b' => '6',
            'c' => 'Â¢',
            'd' => '|)',
            'e' => '3',
            'f' => ']=',
            'g' => '6',
            'h' => '/-/',
            'i' => '1',
            'j' => '_|',
            'k' => '|X',
            'l' => '1',
            'm' => '|v|',
            'n' => '|\\|',
            'o' => '0',
            'p' => '|*',
            'q' => '(_,)',
            'r' => '2',
            's' => '5',
            't' => '7',
            'u' => 'M',
            'v' => '\\/',
            'w' => '\\/\\/',
            'x' => '%',
            'y' => 'j',
            'z' => '2'
        };
*/
        Map<String, String> charMap = new Map<String, String>{
            'a' =>
            '  __  \n'+
            ' / _\\ \n'+
            '/    \\\n'+
            '\\_/\\_/\n'
            ,
            'b' =>
            ' ____ \n'+
            '(  _ \\\n'+
            ' ) _ (\n'+
            '(____/\n'
            ,
            'c' =>
            '  ___ \n'+
            ' / __)\n'+
            '( (__ \n'+
            ' \\___)\n'
            ,
            'd' =>
            ' ____ \n'+
            '(    \\\n'+
            ' ) D (\n'+
            '(____/\n'
            ,
            'e' =>
            ' ____ \n'+
            '(  __)\n'+
            ' ) _) \n'+
            '(____)\n'
            ,
            'f' =>
            ' ____ \n'+
            '(  __)\n'+
            ' ) _) \n'+
            '(__)  \n'
            ,
            'g' =>
            '  ___ \n'+
            ' / __)\n'+
            '( (_ \\\n'+
            ' \\___/\n'
            ,
            'h' =>
            ' _  _ \n'+
            '/ )( \\\n'+
            ') __ (\n'+
            '\\_)(_/\n'
            ,
            'i' =>
            '  __  \n'+
            ' (  ) \n'+
            '  )(  \n'+
            ' (__) \n'
            ,
            'j' =>
            '   __ \n'+
            ' _(  )\n'+
            '/ \\) \\\n'+
            '\\____/\n'
            ,
            'k' =>
            ' __ _ \n'+
            '(  / )\n'+
            ' )  ( \n'+
            '(__\\_)\n'
            ,
            'l' =>
            ' __   \n'+
            '(  )  \n'+
            '/ (_/\\\n'+
            '\\____/\n'
            ,
            'm' =>
            '( \\/ )\n'+
            '/ \\/ \\\n'+
            '\\_)(_/\n'
            ,
            'n' =>
            ' __ _ \n'+
            '(  ( \\\n'+
            '/    /\n'+
            '\\_)__)\n'
            ,
            'o' =>
            '  __  \n'+
            ' /  \\ \n'+
            '(  O )\n'+
            ' \\__/ \n'
            ,
            'p' =>
            ' ____ \n'+
            '(  _ \\\n'+
            ' ) __/\n'+
            '(__)  \n'
            ,
            'q' =>
            '  __  \n'+
            ' /  \\ \n'+
            '(  O )\n'+
            ' \\__\\)\n'
            ,
            'r' =>
            ' ____ \n'+
            '(  _ \\\n'+
            ' )   /\n'+
            '(__\\_)\n'
            ,
            's' =>
            ' ____ \n'+
            '/ ___)\n'+
            '\\___ \\\n'+
            '(____/\n'
            ,
            't' =>
            ' ____ \n'+
            '(_  _)\n'+
            '  )(  \n'+
            ' (__) \n'
            ,
            'u' =>
            ' _  _ \n'+
            '/ )( \\\n'+
            ') \\/ (\n'+
            '\\____/\n'
            ,
            'v' =>
            ' _  _ \n'+
            '/ )( \\\n'+
            '\\ \\/ /\n'+
            ' \\__/ \n'
            ,
            'w' =>
            ' _  _ \n'+
            '/ )( \\\n'+
            '\\ /\\ /\n'+
            '(_/\\_)\n'
            ,
            'x' =>
            ' _  _ \n'+
            '( \\/ )\n'+
            ' )  ( \n'+
            '(_/\\_)\n'
            ,
            'y' =>
            ' _  _ \n'+
            '( \\/ )\n'+
            ' )  / \n'+
            '(__/  \n'
            ,
            'z' =>
            ' ____ \n'+
            '(__  )\n'+
            ' / _/ \n'+
            '(____)\n'
            ,
            '.' =>
            '  _   \n'+
            ' (_)  \n'
            ,
            ',' =>
            '  _   \n'+
            ' ( )  \n'+
            ' (/   \n'
            ,
            '-' =>
            ' ___  \n'+
            '(___) \n'
            ,
            '?' =>
            ' ___  \n'+
            '(__ \\ \n'+
            ' (__/ \n'+
            ' (_)  \n'
            ,
            '!' =>
            '  _   \n'+
            ' / \\  \n'+
            ' \\_/  \n'+
            ' (_)  \n'
            ,
            '@' =>
            '  ___ \n'+
            ' /   \\\n'+
            '( (__/\n'+
            ' \\___)\n'
            ,
            '1' =>
            '  __  \n'+
            ' /  \\ \n'+
            '(_/ / \n'+
            ' (__) \n'
            ,
            '2' =>
            ' ____ \n'+
            '(___ \\\n'+
            ' / __/\n'+
            '(____)\n'
            ,
            '3' =>
            ' ____ \n'+
            '( __ \\\n'+
            ' (__ (\n'+
            '(____/\n'
            ,
            '4' =>
            '  ___ \n'+
            ' / _ \\\n'+
            '(__  (\n'+
            '  (__/\n'
            ,
            '5' =>
            '  ___ \n'+
            ' / __)\n'+
            '(___ \\\n'+
            '(____/\n'
            ,
            '6' =>
            '  ___ \n'+
            ' / __)\n'+
            '(  _ \\\n'+
            ' \\___/\n'
            ,
            '7' =>
            ' ____ \n'+
            '(__  )\n'+
            '  / / \n'+
            ' (_/  \n'
            ,
            '8' =>
            ' ____ \n'+
            '/ _  \\\n'+
            ') _  (\n'+
            '\\____/\n'
            ,
            '9' =>
            ' ___  \n'+
            '/ _ \\ \n'+
            '\\__  )\n'+
            '(___/ \n'
            ,
            '0' =>
            '  __  \n'+
            ' /  \\ \n'+
            '(  0 )\n'+
            ' \\__/  \n'
            ,
            ' ' =>
            '\n'
        };


        String output = '';

        for (Integer i=0; i<input.length(); i++) {
            String c = input.substring(i, i+1).toLowerCase();
            if (charMap.containsKey(c)) {
                output += charMap.get(c);
            }
        }
        return output;
    }

}